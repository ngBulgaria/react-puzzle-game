{"version":3,"sources":["components/PuzzlePiece.js","utils/puzzleUtils.js","components/Puzzle.js","App.js","reportWebVitals.js","index.js"],"names":["PuzzlePiece","_ref","piece","handlePieceClick","isMovable","className","React","createElement","onClick","position","src","alt","style","width","height","shuffleArray","array","i","length","j","Math","floor","random","isAdjacent","index1","index2","cols","row1","col1","row2","col2","abs","Puzzle","imageSrc","setImageSrc","useState","pieces","setPieces","rows","setRows","setCols","emptyIndex","setEmptyIndex","removedPiece","setRemovedPiece","puzzleWidth","setPuzzleWidth","puzzleHeight","setPuzzleHeight","createPuzzlePieces","useCallback","image","Image","onload","screenMaxWidth","window","innerWidth","screenMaxHeight","innerHeight","pieceWidth","pieceHeight","canvas","document","ctx","getContext","newPieces","clearRect","drawImage","push","toDataURL","index","pieceIndex","findIndex","checkAndHandleSolvedState","every","updatedPieces","useEffect","type","accept","onChange","event","file","target","files","reader","FileReader","e","result","readAsDataURL","value","Number","randomizePuzzle","bottomRightIndex","removed","find","filter","map","gridTemplateColumns","Array","from","_","key","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.fa5a77d8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./PuzzlePiece.css\";\n\nfunction PuzzlePiece({ piece, handlePieceClick, isMovable }) {\n  const className = `puzzle-piece ${isMovable ? \"\" : \"inactive\"}`;\n\n  return (\n    <div\n      className={className}\n      onClick={() => piece && handlePieceClick(piece.position)}\n    >\n      {piece && (\n        <img\n          src={piece.src}\n          alt={`puzzle-piece-${piece.position}`}\n          style={{ width: \"100%\", height: \"100%\" }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default PuzzlePiece;\n","export const shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nexport const isAdjacent = (index1, index2, cols) => {\n  const row1 = Math.floor(index1 / cols);\n  const col1 = index1 % cols;\n  const row2 = Math.floor(index2 / cols);\n  const col2 = index2 % cols;\n\n  return (\n    (row1 === row2 && Math.abs(col1 - col2) === 1) || // Adjacent horizontally\n    (col1 === col2 && Math.abs(row1 - row2) === 1) // Adjacent vertically\n  );\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport PuzzlePiece from \"./PuzzlePiece\";\nimport { shuffleArray, isAdjacent } from \"../utils/puzzleUtils\";\nimport \"./Puzzle.css\";\n\nfunction Puzzle() {\n  const [imageSrc, setImageSrc] = useState(null);\n  const [pieces, setPieces] = useState([]);\n  const [rows, setRows] = useState(3);\n  const [cols, setCols] = useState(3);\n  const [emptyIndex, setEmptyIndex] = useState(null);\n  const [removedPiece, setRemovedPiece] = useState(null);\n  const [puzzleWidth, setPuzzleWidth] = useState(0);\n  const [puzzleHeight, setPuzzleHeight] = useState(0);\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      setImageSrc(e.target.result);\n    };\n\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const createPuzzlePieces = useCallback(() => {\n    const image = new Image();\n    image.src = imageSrc;\n\n    image.onload = () => {\n      const screenMaxWidth = window.innerWidth * 0.95;\n      const screenMaxHeight = window.innerHeight * 0.8;\n\n      let puzzleWidth, puzzleHeight;\n\n      if (window.innerWidth > window.innerHeight) {\n        // Landscape mode: fit within 80% of screen height\n        puzzleHeight = screenMaxHeight;\n        puzzleWidth = (image.width * puzzleHeight) / image.height;\n        if (puzzleWidth > window.innerWidth * 0.95) {\n          puzzleWidth = window.innerWidth * 0.95;\n          puzzleHeight = (image.height * puzzleWidth) / image.width;\n        }\n      } else {\n        // Portrait mode: fit within 95% of screen width\n        puzzleWidth = screenMaxWidth;\n        puzzleHeight = (image.height * puzzleWidth) / image.width;\n        if (puzzleHeight > window.innerHeight * 0.95) {\n          puzzleHeight = window.innerHeight * 0.95;\n          puzzleWidth = (image.width * puzzleHeight) / image.height;\n        }\n      }\n\n      setPuzzleWidth(puzzleWidth);\n      setPuzzleHeight(puzzleHeight);\n\n      const pieceWidth = puzzleWidth / cols;\n      const pieceHeight = puzzleHeight / rows;\n      const canvas = document.createElement(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n      const newPieces = [];\n\n      for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n          canvas.width = pieceWidth;\n          canvas.height = pieceHeight;\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(\n            image,\n            j * (image.width / cols),\n            i * (image.height / rows),\n            image.width / cols,\n            image.height / rows,\n            0,\n            0,\n            canvas.width,\n            canvas.height\n          );\n          newPieces.push({\n            src: canvas.toDataURL(),\n            index: i * cols + j,\n            position: i * cols + j,\n          });\n        }\n      }\n\n      setPieces(newPieces);\n      setEmptyIndex(null); // Reset empty index\n      setRemovedPiece(null); // Reset the removed piece when reinitializing\n    };\n  }, [imageSrc, rows, cols]);\n\n  const randomizePuzzle = () => {\n    let newPieces = [...pieces];\n    const bottomRightIndex = rows * cols - 1;\n\n    // Remove the bottom-right piece before shuffling and store it\n    const removed = newPieces.find((piece) => piece.index === bottomRightIndex);\n    setRemovedPiece(removed);\n    newPieces = newPieces.filter((piece) => piece.index !== bottomRightIndex);\n\n    // Shuffle the remaining pieces\n    newPieces = shuffleArray(newPieces);\n\n    // Reassign positions based on the shuffled order\n    newPieces = newPieces.map((piece, index) => ({\n      ...piece,\n      position: index,\n    }));\n\n    // Set the empty index to the bottom-right position\n    setEmptyIndex(bottomRightIndex);\n\n    // Update the pieces state with the shuffled pieces\n    setPieces(newPieces);\n  };\n\n  const checkAndHandleSolvedState = () => {\n    if (\n      pieces.length === rows * cols - 1 &&\n      pieces.every((piece) => piece.position === piece.index)\n    ) {\n      // Puzzle is solved, add the missing bottom-right piece back\n      if (removedPiece) {\n        const updatedPieces = [\n          ...pieces,\n          { ...removedPiece, position: rows * cols - 1 },\n        ];\n        setPieces(updatedPieces);\n        setEmptyIndex(null); // No empty index after the piece is added\n      }\n    }\n  };\n\n  const handlePieceClick = (index) => {\n    if (isAdjacent(index, emptyIndex, cols)) {\n      const newPieces = [...pieces];\n      const pieceIndex = newPieces.findIndex(\n        (piece) => piece.position === index\n      );\n\n      newPieces[pieceIndex].position = emptyIndex;\n      setEmptyIndex(index);\n      setPieces(newPieces);\n\n      // Check if the puzzle is solved after moving the piece\n      checkAndHandleSolvedState();\n    }\n  };\n\n  useEffect(() => {\n    if (imageSrc) {\n      createPuzzlePieces();\n    }\n  }, [imageSrc, rows, cols, createPuzzlePieces]);\n\n  return (\n    <div>\n      <div className=\"puzzle-controls\">\n        <input type=\"file\" accept=\"image/*\" onChange={handleFileUpload} />\n        <label>\n          Rows:\n          <input\n            type=\"number\"\n            value={rows}\n            onChange={(e) => setRows(Number(e.target.value))}\n          />\n        </label>\n        <label>\n          Columns:\n          <input\n            type=\"number\"\n            value={cols}\n            onChange={(e) => setCols(Number(e.target.value))}\n          />\n        </label>\n        <button onClick={randomizePuzzle}>Randomize</button>\n      </div>\n      {pieces.length > 0 && (\n        <div\n          className=\"puzzle-container\"\n          style={{\n            gridTemplateColumns: `repeat(${cols}, 1fr)`,\n            width: `${puzzleWidth}px`,\n            height: `${puzzleHeight}px`,\n          }}\n        >\n          {Array.from({ length: rows * cols }).map((_, index) => {\n            const piece = pieces.find((piece) => piece.position === index);\n            return (\n              <PuzzlePiece\n                key={index}\n                piece={piece}\n                handlePieceClick={handlePieceClick}\n                isMovable={piece && isAdjacent(index, emptyIndex, cols)}\n              />\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Puzzle;\n","import React from \"react\";\nimport Puzzle from \"./components/Puzzle\";\nimport \"./index.css\"; // Any global styles\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Puzzle />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}